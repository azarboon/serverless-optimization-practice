{
  "manifest": {
    "name": "serverless-webpack",
    "version": "5.1.1",
    "description": "Serverless plugin to bundle your javascript with Webpack",
    "main": "index.js",
    "author": {
      "name": "Frank Schmid",
      "email": "fschmid740@googlemail.com"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/serverless-heaven/serverless-webpack.git"
    },
    "keywords": [
      "serverless",
      "1.0",
      "webpack",
      "babel",
      "typescript",
      "es6",
      "plugin",
      "runtime"
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/serverless-heaven/serverless-webpack/issues"
    },
    "homepage": "https://github.com/serverless-heaven/serverless-webpack#readme",
    "scripts": {
      "test": "nyc ./node_modules/mocha/bin/_mocha tests/all index.test.js \"lib/**/*.test.js\" -R spec --recursive",
      "eslint": "node node_modules/eslint/bin/eslint.js --ext .js lib"
    },
    "nyc": {
      "all": true,
      "exclude": [
        "tests/**/*.*",
        "**/*.test.js",
        "coverage/**",
        "examples/**"
      ],
      "reporter": [
        "lcov",
        "clover",
        "text-summary"
      ],
      "report-dir": "./coverage"
    },
    "dependencies": {
      "archiver": "^2.1.1",
      "bluebird": "^3.5.1",
      "fs-extra": "^4.0.3",
      "glob": "^7.1.2",
      "is-builtin-module": "^1.0.0",
      "lodash": "^4.17.5",
      "semver": "^5.5.0",
      "ts-node": "^3.2.0"
    },
    "devDependencies": {
      "babel-eslint": "^8.2.2",
      "chai": "^4.1.2",
      "chai-as-promised": "^7.1.1",
      "coveralls": "^3.0.0",
      "eslint": "^4.18.2",
      "eslint-plugin-import": "^2.9.0",
      "eslint-plugin-lodash": "^2.6.1",
      "eslint-plugin-promise": "^3.7.0",
      "mocha": "^5.0.4",
      "mockery": "^2.1.0",
      "nyc": "^11.6.0",
      "serverless": "^1.26.1",
      "sinon": "^4.4.5",
      "sinon-chai": "^3.0.0"
    },
    "peerDependencies": {
      "webpack": ">= 3.0.0 < 5"
    },
    "_registry": "npm",
    "_loc": "/Users/mahdi.azarboon/Documents/dev-unsynced/optimization-practice/.yarn/v1/npm-serverless-webpack-5.1.1-2ff8d1d48c4103104bc1ea8aaa7aee9a4e337af4/package.json",
    "readmeFilename": "README.md",
    "readme": "# Serverless Webpack\n\n[![Serverless][ico-serverless]][link-serverless]\n[![License][ico-license]][link-license]\n[![NPM][ico-npm]][link-npm]\n[![Build Status][ico-build]][link-build]\n[![Coverage Status][ico-coverage]][link-coverage]\n[![Contributors][ico-contributors]][link-contributors]\n\nA Serverless v1.x plugin to build your lambda functions with [Webpack][link-webpack].\n\nThis plugin is for you if you want to use the latest Javascript version with [Babel][link-babel];\nuse custom [resource loaders][link-webpack-loaders], optimize your packaged functions individually\nand much more!\n\n## Highlights\n\n* Configuration possibilities range from zero-config to fully customizable\n* Support of `serverless package`, `serverless deploy` and `serverless deploy function`\n* Support of `serverless invoke local` and `serverless invoke local --watch`\n* Support of `serverless run` and `serverless run --watch`\n* Integrates with [`serverless-offline`][link-serverless-offline] to simulate local API Gateway endpoints\n* When enabled in your service configuration, functions are packaged and compiled\nindividually, resulting in smaller Lambda packages that contain only the code and\ndependencies needed to run the function. This allows the plugin to fully utilize\nWebPack's [Tree-Shaking][link-webpack-tree] optimization.\n* Webpack version 3 and 4 support\n* Support NPM and Yarn for packaging\n\n## Recent improvements and important changes\n\n* Support Yarn\n* Support Webpack 4\n* Drop Webpack 2 support\n* Cleaned up configuration. You should now use a `custom.webpack` object to configure everything relevant for the plugin. The old configuration still works but will be removed in the next major release. For details see below.\n\nFor the complete release notes see the end of this document.\n\n## Install\n\n```bash\n$ npm install serverless-webpack --save-dev\n```\n\nAdd the plugin to your `serverless.yml` file:\n\n```yaml\nplugins:\n  - serverless-webpack\n```\n\n## Configure\n\nThe configuration of the plugin is done by defining a `custom: webpack` object in your `serverless.yml` with your specific configuration. All settings are optional and will be set to reasonable defaults if missing.\n\nSee the sections below for detailed descriptions of the settings. The defaults are:\n\n```yaml\ncustom:\n  webpack:\n    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file\n    includeModules: false   # Node modules configuration for packaging\n    packager: 'npm'   # Packager that will be used to package your external modules\n    packExternalModulesMaxBuffer: 200 * 1024   # Size of stdio buffers for spawned child processes\n```\n\n### Webpack configuration file\n\nBy default the plugin will look for a `webpack.config.js` in the service directory. Alternatively, you can specify a different file or configuration in `serverless.yml`.\n\n```yaml\ncustom:\n  webpack:\n    webpackConfig: ./folder/my-webpack.config.js\n```\n\nA base Webpack configuration might look like this:\n\n```js\n// webpack.config.js\n\nmodule.exports = {\n  entry: './handler.js',\n  target: 'node',\n  module: {\n    loaders: [ ... ]\n  }\n};\n```\n\n### serverless-webpack lib export helper\n\nserverless-webpack exposes a lib object, that can be used in your webpack.config.js\nto make the configuration easier and to build fully dynamic configurations.\nThis is the preferred way to configure webpack - the plugin will take care of\nas much of the configuration (and subsequent changes in your services) as it can.\n\n#### Automatic entry resolution\n\nYou can let the plugin determine the correct handler entry points at build time.\nThen you do not have to care anymore when you add or remove functions from your service:\n\n```js\n// webpack.config.js\nconst slsw = require('serverless-webpack');\n\nmodule.exports = {\n  ...\n  entry: slsw.lib.entries,\n  ...\n};\n```\n\nCustom entries that are not part of the SLS build process can be added too:\n\n```js\n// webpack.config.js\nconst _ = require('lodash');\nconst slsw = require('serverless-webpack');\n\nmodule.exports = {\n  ...\n  entry: _.assign({\n    myCustomEntry1: './custom/path/something.js'\n  }, slsw.lib.entries),\n  ...\n};\n```\n\n#### Full customization (for experts)\n\nThe lib export also provides the `serverless` and `options` properties, through\nwhich you can access the Serverless instance and the options given on the command-line.\n\nThis enables you to have a fully customized dynamic configuration, that can evaluate\nanything available in the Serverless framework. There are really no limits.\n\nSamples are: The current stage and the complete service definition. You thereby\nhave access to anything that a Serverless plugin would have access to.\n\nBoth properties should be handled with care and should never be written to,\nas that will modify the running framework and leads to unpredictable behavior!\n\nIf you have cool use cases with the full customization, we might add your solution\nto the plugin examples as showcase.\n\n#### Invocation state\n\n`lib.webpack` contains state variables that can be used to configure the build\ndynamically on a specific plugin state.\n\n##### isLocal\n\n`lib.webpack.isLocal` is a boolean property that is set to true, if any known\nmechanism is used in the current Serverless invocation that runs code locally.\n\nThis allows to set properties in the webpack configuration differently depending\nif the lambda code is run on the local machine or deployed.\n\nA sample is to set the compile mode with Webpack 4:\n```\nmode: slsw.lib.webpack.isLocal ? \"development\" : \"production\"\n```\n\n### Output\n\nNote that, if the `output` configuration is not set, it will automatically be\ngenerated to write bundles in the `.webpack` directory. If you set your own `output`\nconfiguration make sure to add a [`libraryTarget`][link-webpack-libtarget]\nfor best compatibility with external dependencies:\n\n```js\n// webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n  // ...\n  output: {\n    libraryTarget: 'commonjs',\n    path: path.resolve(__dirname, '.webpack'),\n    filename: '[name].js',\n  },\n  // ...\n};\n```\n\n### Stats\n\nBy default, the plugin will print a quite verbose bundle information to your console. However, if\nyou are not satisfy with the current output info, you can overwrite it in your `webpack.config.js`\n\n```js\n// webpack.config.js\n\nmodule.export = {\n  // ...\n  stats: 'minimal'\n  // ...\n}\n```\n\nAll the stats config can be found in [webpack's documentation][link-webpack-stats]\n\n\n### Node modules / externals\n\nBy default, the plugin will try to bundle all dependencies. However, you don't\nwant to include all modules in some cases such as selectively import, excluding\nbuiltin package (ie: `aws-sdk`) and handling webpack-incompatible modules.\n\nIn this case you might add external modules in\n[Webpack's `externals` configuration][link-webpack-externals].\nThose modules can be included in the Serverless bundle with the `custom: webpack: includeModules`\noption in `serverless.yml`:\n\n```js\n// webpack.config.js\nvar nodeExternals = require('webpack-node-externals')\n\nmodule.exports = {\n  // we use webpack-node-externals to excludes all node deps.\n  // You can manually set the externals too.\n  externals: [nodeExternals()],\n}\n```\n\n```yaml\n# serverless.yml\ncustom:\n  webpack:\n    includeModules: true # enable auto-packing of external modules\n```\n\n\nAll modules stated in `externals` will be excluded from bundled files. If an excluded module\nis stated as `dependencies` in `package.json`, it will be packed into the Serverless\nartifact under the `node_modules` directory.\n\nBy default, the plugin will use the `package.json` file in working directory, If you want to\nuse a different package file, set `packagePath` to your custom `package.json`:\n\n```yaml\n# serverless.yml\ncustom:\n  webpack:\n    includeModules:\n      packagePath: '../package.json' # relative path to custom package.json file.\n```\n> Note that only relative path is supported at the moment.\n\n#### Packagers\n\nYou can select the packager that will be used to package your external modules.\nThe packager can be set with the packager configuration. Currently it can be 'npm'\nor 'yarn' and defaults to using npm when not set.\n\n```yaml\n# serverless.yml\ncustom:\n  webpack:\n    packager: 'yarn'      # Defaults to npm\n    packagerOptions: {}   # Optional, depending on the selected packager\n```\n\nYou should select the packager, that you use to develop your projects, because only\nthen locked versions will be handled correctly, i.e. the plugin uses the generated \n(and usually committed) package lock file that is created by your favorite packager.\n\nEach packager might support specific options that can be set in the `packagerOptions`\nconfiguration setting. For details see below.\n\n##### NPM\n\nBy default, the plugin uses NPM to package the external modules. However, if you use npm,\nyou should use any version `<5.5 >=5.7.1` as the versions in-between have some nasty bugs.\n\nRight now there are no `packagerOptions` that can be set with NPM.\n\n##### Yarn\n\nUsing yarn will switch the whole packaging pipeline to use yarn, so does it use a `yarn.lock` file.\n\nThe yarn packager supports the following `packagerOptions`:\n\n| Option        | Type | Default | Description |\n|---------------|------|---------|-------------|\n| ignoreScripts | bool | true    | Do not execute package.json hook scripts on install |\n\n##### Common packager options\n\nThere are some settings that are common to all packagers and affect the packaging itself.\n\n###### Custom scripts\n\nYou can specify custom scripts that are executed after the installation of the function/service packages\nhas been finished. These are standard packager scripts as they can be used in any `package.json`.\n\nWarning: The use cases for them are very rare and specific and you should investigate first,\nif your use case can be covered with webpack plugins first. They should never access files \noutside of their current working directory which is the compiled function folder, if any.\nA valid use case would be to start anything available as binary from `node_modules`.\n\n```yaml\ncustom:\n  webpack:\n    packagerOptions:\n      scripts:\n        - npm rebuild grpc --target=6.1.0 --target_arch=x64 --target_platform=linux --target_libc=glibc\n```\n\n#### Forced inclusion\n\nSometimes it might happen that you use dynamic requires in your code, i.e. you\nrequire modules that are only known at runtime. Webpack is not able to detect\nsuch externals and the compiled package will miss the needed dependencies.\nIn such cases you can force the plugin to include certain modules by setting\nthem in the `forceInclude` array property. However the module must appear in\nyour service's production dependencies in `package.json`.\n\n```yaml\n# serverless.yml\ncustom:\n  webpack:\n    includeModules:\n      forceInclude:\n        - module1\n        - module2\n```\n\n#### Forced exclusion\n\nYou can forcefully exclude detected external modules, e.g. if you have a module\nin your dependencies that is already installed at your provider's environment.\n\nJust add them to the `forceExclude` array property and they will not be packaged.\n\n```yaml\n# serverless.yml\ncustom:\n  webpack:\n    includeModules:\n      forceExclude:\n        - module1\n        - module2\n```\n\nIf you specify a module in both arrays, `forceInclude` and `forceExclude`, the\nexclude wins and the module will not be packaged.\n\n#### Local modules\n\nYou can use `file:` version references in your `package.json` to use a node module\nfrom a local folder (e.g. `\"mymodule\": \"file:../../myOtherProject/mymodule\"`).\nWith that you can do test deployments from the local machine with different\nmodule versions or modules before they are published officially.\n\n#### Examples\n\nYou can find an example setups in the [`examples`][link-examples] folder.\n\n#### Service level packaging\n\nIf you do not enable individual packaging in your service (serverless.yml), the\nplugin creates one ZIP file for all functions (the service package) that includes\nall node modules used in the service. This is the fastest packaging, but not the\noptimal one, as node modules are always packaged, that are not needed by some\nfunctions.\n\n#### Optimization / Individual packaging per function\n\nA better way to do the packaging, is to enable individual packaging in your\nservice:\n\n```yaml\n# serverless.yml\n...\npackage:\n  individually: true\n...\n```\n\nThis will switch the plugin to per function packaging which makes use of the multi-compiler\nfeature of Webpack. That means, that Webpack compiles **and optimizes** each\nfunction individually, removing unnecessary imports and reducing code sizes\nsignificantly. Tree-Shaking only makes sense with this approach.\n\nNow the needed external node modules are also detected by Webpack per function\nand the plugin only packages the needed ones into the function artifacts. As a\nresult, the deployed artifacts are smaller, depending on the functions and\ncold-start times (to install the functions into the cloud at runtime) are reduced\ntoo.\n\nThe individual packaging will automatically apply the _automatic entry resolution_ (see above) and\nyou will not be able to configure the entry config in webpack. An error will be thrown\nif you are trying to override the entry in webpack.config.js with other unsupported values.\n\nThe individual packaging needs more time at the packaging phase, but you'll\nget that paid back twice at runtime.\n\n## Usage\n\n### Automatic bundling\n\nThe normal Serverless deploy procedure will automatically bundle with Webpack:\n\n- Create the Serverless project with `serverless create -t aws-nodejs`\n- Install Serverless Webpack as above\n- Deploy with `serverless deploy`\n\n### Run a function locally\n\nThe plugin fully integrates with `serverless invoke local`. To run your bundled functions\nlocally you can:\n\n```bash\n$ serverless invoke local --function <function-name>\n```\n\nAll options that are supported by invoke local can be used as usual:\n\n- `--function` or `-f` (required) is the name of the function to run\n- `--path` or `-p` (optional) is a JSON file path used as the function input event\n- `--data` or `-d` (optional) inline JSON data used as the function input event\n\n> :exclamation: The old `webpack invoke` command has been disabled.\n\n#### Run a function with an existing compiled output (--no-build)\n\nOn CI systems it is likely that you'll run multiple integration tests with `invoke local`\nsequentially. To improve this, you can do one compile and run multiple invokes on the\ncompiled output -  it is not necessary to compile again before each and every invoke.\n\n```bash\n$ serverless webpack\n$ serverless invoke local --function <function-name-1> --no-build\n$ serverless invoke local --function <function-name-2> --no-build\n...\n```\n\n### Run a function locally on source changes\n\nOr to run a function every time the source files change use the `--watch` option\ntogether with `serverless invoke local`:\n\n```bash\n$ serverless invoke local --function <function-name> --path event.json --watch\n```\n\nEverytime the sources are changed, the function will be executed again with the\nchanged sources. The command will watch until the process is terminated.\n\nIf you have your sources located on a file system that does not offer events,\nyou can enable polling with the `--webpack-use-polling=<time in ms>` option.\nIf you omit the value, it defaults to 3000 ms.\n\nAll options that are supported by invoke local can be used as usual:\n\n- `--function` or `-f` (required) is the name of the function to run\n- `--path` or `-p` (optional) is a JSON file path used as the function input event\n- `--data` or `-d` (optional) inline JSON data used as the function input event\n\n> :exclamation: The old `webpack watch` command has been disabled.\n\n### Usage with serverless run (Serverless Event Gateway)\n\nThe `serverless run` command is supported with the plugin. To test a local\nservice with the Serverless Emulator, you can use the `serverless run`\ncommand as documented by Serverless. The command will compile the code before\nit uploads it into the event gateway.\n\n#### Serverless run with webpack watch mode\n\nYou can enable source watch mode with `serverless run --watch`. The plugin will\nthen watch for any source changes, recompile and redeploy the code to the event\ngateway. So you can just keep the event gateway running and test new code immediately.\n\n### Usage with serverless-offline\n\nThe plugin integrates very well with [serverless-offline][link-serverless-offline] to\nsimulate AWS Lambda and AWS API Gateway locally.\n\nAdd the plugins to your `serverless.yml` file and make sure that `serverless-webpack`\nprecedes `serverless-offline` as the order is important:\n```yaml\n  plugins:\n    ...\n    - serverless-webpack\n    ...\n    - serverless-offline\n    ...\n```\n\nRun `serverless offline` or `serverless offline start` to start the Lambda/API simulation.\n\nIn comparison to `serverless offline`, the `start` command will fire an `init` and a `end` lifecycle hook which is needed for `serverless-offline` and e.g. `serverless-dynamodb-local` to switch off resources (see below).\n\nYou can find an example setup in the [`examples`][link-examples] folder.\n\nBy default the plugin starts in watch mode when triggered through `serverless offline`, i.e.\nit automatically recompiles your code if it detects a change in the used sources.\nAfter a change it might take some seconds until the emulated endpoints are updated.\n\nIf you have your sources located on a file system that does not offer events,\ne.g. a mounted volume in a Docker container, you can enable polling with the\n`--webpack-use-polling=<time in ms>` option. If you omit the value, it defaults\nto 3000 ms.\n\n#### Custom paths\n\nIf you do not use the default path and override it in your Webpack configuration,\nyou have use the `--location` option.\n\n#### serverless-dynamodb-local\n\nConfigure your service the same as mentioned above, but additionally add the `serverless-dynamodb-local`\nplugin as follows:\n```yaml\n  plugins:\n    - serverless-webpack\n    - serverless-dynamodb-local\n    - serverless-offline\n```\n\nRun `serverless offline start`.\n\n#### Other useful options\n\nYou can reduce the clutter generated by `serverless-offline` with `--dontPrintOutput` and\ndisable timeouts with `--noTimeout`.\n\nIf you use serverless offline to run your integration tests, you might want to\ndisable the automatic watch mode with the `--webpack-no-watch` switch.\n\n### Bundle with webpack\n\nTo just bundle and see the output result use:\n\n```bash\n$ serverless webpack --out dist\n```\n\nOptions are:\n\n- `--out` or `-o` (optional) The output directory. Defaults to `.webpack`.\n\n### Simulate API Gateway locally\n\n:exclamation: The serve command has been removed. See above how to achieve the\nsame functionality with the [`serverless-offline`][link-serverless-offline] plugin.\n\n## Example with Babel\n\nIn the [`examples`][link-examples] folder there is a Serverless project using this\nplugin with Babel. To try it, from inside the example folder:\n\n- `npm install` to install dependencies\n- `serverless invoke local -f hello` to run the example function\n\n## Provider Support\n\nPlugin commands are supported by the following providers. ⁇ indicates that command has not been tested with that provider.\n\n|                       | AWS Lambda | Apache OpenWhisk | Azure Functions | Google Cloud Functions |\n|-----------------------|------------|------------------|-----------------|------------------------|\n| webpack               |      ✔︎     |         ✔︎        |        ⁇        |            ⁇           |\n| invoke local          |      ✔︎     |         ✔︎        |        ⁇        |            ⁇           |\n| invoke local --watch  |      ✔︎     |         ✔︎        |        ⁇        |            ⁇           |\n\n## Plugin support\n\nThe following serverless plugins are explicitly supported with `serverless-webpack`\n\n| Plugin                            | NPM |\n|-----------------------------------|-----|\n| serverless-offline | [![NPM][ico-serverless-offline]][link-serverless-offline] |\n| serverless-step-functions-offline | [![NPM][ico-step-functions-offline]][link-step-functions-offline] |\n\n## For developers\n\nThe plugin exposes a complete lifecycle model that can be hooked by other plugins to extend\nthe functionality of the plugin or add additional actions.\n\n### The event lifecycles and their hookable events (H)\n\nAll events (H) can be hooked by a plugin.\n\n```\n-> webpack:validate\n   -> webpack:validate:validate (H)\n-> webpack:compile\n   -> webpack:compile:compile (H)\n   -> webpack:compile:watch:compile (H)\n-> webpack:package\n   -> webpack:package:packExternalModules (H)\n   -> webpack:package:packageModules (H)\n```\n\n### Integration of the lifecycles into the command invocations and hooks\n\nThe following list shows all lifecycles that are invoked/started by the\nplugin when running a command or invoked by a hook.\n\n```\n-> before:package:createDeploymentArtifacts\n   -> webpack:validate\n   -> webpack:compile\n   -> webpack:package\n\n-> before:deploy:function:packageFunction\n   -> webpack:validate\n   -> webpack:compile\n   -> webpack:package\n\n-> before:invoke:local:invoke\n   -> webpack:validate\n   -> webpack:compile\n\n-> webpack\n   -> webpack:validate\n   -> webpack:compile\n   -> webpack:package\n\n-> before:offline:start\n   -> webpack:validate\n   -> webpack:compile\n\n-> before:offline:start:init\n   -> webpack:validate\n   -> webpack:compile\n```\n\n## Thanks\n\nSpecial thanks go to the initial author of serverless-webpack, Nicola Peduzzi (https://github.com/thenikso), who allowed\nme to take it over and continue working on the project. That helped to revive it and lead it to new horizons.\n\n## Release Notes\n\n* 5.1.1\n  * Fixed local invoke watch mode not executing changed files [#349][link-349]\n  * Added Webpack 4 example [#355][link-355]\n  * Documentation updates [#354][link-354]\n\n* 5.1.0\n  * Support Yarn [#286][link-286]\n  * Allow local invoke to use existing compiled output [#341][link-341] [#275][link-275]\n  * Support custom packager scripts [#343][link-343] [#342][link-342]\n\n* 5.0.0\n  * Support Webpack 4 [#331][link-331] [#328][link-328]\n  * BREAKING: Drop support for Webpack 2\n  * Allow to check for local invocation in the webpack configuration [#232][link-232]\n  * New centralized configuration with fallback to the old one [#336][link-336]\n  * Improved unit tests and actual coverage calculation [#337][link-337]\n\n* 4.4.0\n  * Support serverless-step-functions-offline [#313][link-313]\n  * Fixed webpack documentation links [#326][link-326]\n  * Abstracted packager interface [#329][link-329]\n\n* 4.3.0\n  * Add new `webpack:compile:watch:compile` event [#315][link-315]\n  * Added note to README about using yarn [#316][link-316]\n  * Made babel dynamic example the default babel example [#253][link-253]\n  * Documentation fixes [#317][link-317] [#321][link-321]\n\n* 4.2.0\n  * Support local file references in package.json [#263][link-263]\n  * Updated used tools (dev dependencies)\n\n* 4.1.0\n  * Prohibit manual entry configuration with individual packaging [#272][link-272]\n  * Fixed bug with stats in webpack config for individual packaging [#278][link-278]\n  * Fixed bug with startup order in combination with serverless-offline [#279][link-279]\n  * Default target to \"node\" if not set [#276][link-276]\n  * Support `serverless run` including watch mode [#269][link-269]\n\n* 4.0.0\n  * BREAKING: Expose lifecycle events for plugin authors [#254][link-254]\n  * Fixed deprecated hook warning [#126][link-126]\n  * Support forceExclude option for external modules [#247][link-247]\n  * Support stats output configuration in webpack config [#260][link-260]\n  * Google: Only integrate package.json but not node modules into artifact [#264][link-264]\n  * Documentation fixes and updates [#265][link-265]\n  * Updated examples [#250][link-250]\n\n* 3.1.2\n  * Fix issue where dependencies with dots in their names would not be installed [#251][link-251]\n\n* 3.1.1\n  * Fix issue where locked dependencies (package-lock.json) were ignored [#245][link-245]\n\n* 3.1.0\n  * Allow filesystem polling in watch mode (`--webpack-use-polling`) [#215][link-215]\n  * Allow forced include of not referenced modules [#217][link-217]\n  * Automatically include peer dependencies of used modules [#223][link-223]\n  * Show explicit message if the provided webpack config can not be loaded [#234][link-234]\n  * Improve examples [#227][link-227]\n  * Update 3rd party provider compatibility table [#221][link-221]\n  * Added automatic Travis and Coveralls builds to increase stability\n\n* 3.0.0\n  * Integrate with `serverless invoke local` [#151][link-151]\n  * Support watch mode with `serverless invoke local --watch`\n  * Stabilized and improved the bundling of node modules [#116][link-116], [#117][link-117]\n  * Improved interoperability with Serverless and 3rd party plugins [#173][link-173]\n  * Support individual packaging of the functions in a service [#120][link-120]\n  * Allow setting stdio max buffers for NPM operations [#185][link-185]\n  * Support bundling of node modules via node-externals whitelist [#186][link-186]\n  * Removed the `webpack serve` command in favor of [`serverless-offline`][link-serverless-offline] [#152][link-152]\n  * Updated examples [#179][link-179]\n  * Added missing unit tests to improve code stability\n  * Fixed unit tests to run on Windows [#145][link-145]\n\n* 2.2.2\n  * Reverted breaking change introduced in default output config [#202][link-202]\n\n* 2.2.1\n  * Restore functionality for Google provider [#193][link-193]\n\n* 2.2.0\n  * Allow full dynamic configurations [#158][link-158]\n  * Fix a bug that prevented the entries lib export to work with TypeScript [#165][link-165]\n\n* 2.1.0\n  * Added support for webpack configuration in TypeScript format [#129][link-129]\n  * Fixed bug with serverless-offline exec [#154][link-154]\n  * Added unit tests for cleanup. Updated test framework [#11][link-11]\n  * Support single function deploy and packaging [#107][link-107]\n  * Fixed path exception bug with individual packaging and SLS 1.18 [#159][link-159]\n\n* 2.0.0\n  * Support arbitrary Webpack versions as peer dependency [#83][link-83]\n  * Support `serverless offline start` invocation [#131][link-131]\n  * Documentation updates [#88][link-88], [#132][link-132], [#140][link-140], [#141][link-141], [#144][link-144]\n  * Print Webpack stats on recompile [#127][link-127]\n\n[ico-serverless]: http://public.serverless.com/badges/v3.svg\n[ico-license]: https://img.shields.io/github/license/serverless-heaven/serverless-webpack.svg\n[ico-npm]: https://img.shields.io/npm/v/serverless-webpack.svg\n[ico-build]: https://travis-ci.org/serverless-heaven/serverless-webpack.svg?branch=master\n[ico-coverage]: https://coveralls.io/repos/github/serverless-heaven/serverless-webpack/badge.svg?branch=master\n[ico-contributors]: https://img.shields.io/github/contributors/serverless-heaven/serverless-webpack.svg\n\n[link-serverless]: http://www.serverless.com/\n[link-license]: ./blob/master/LICENSE\n[link-npm]: https://www.npmjs.com/package/serverless-webpack\n[link-build]: https://travis-ci.org/serverless-heaven/serverless-webpack\n[link-coverage]: https://coveralls.io/github/serverless-heaven/serverless-webpack?branch=master\n[link-contributors]: https://github.com/serverless-heaven/serverless-webpack/graphs/contributors\n\n[link-webpack]: https://webpack.github.io/\n[link-babel]: https://babeljs.io/\n[link-webpack-stats]: https://webpack.js.org/configuration/stats/\n[link-webpack-loaders]: https://webpack.js.org/concepts/loaders/\n[link-webpack-libtarget]: https://webpack.js.org/configuration/output/#output-librarytarget\n[link-webpack-tree]: https://webpack.js.org/guides/tree-shaking/\n[link-webpack-externals]: https://webpack.js.org/configuration/externals/\n[link-examples]: ./examples\n[link-serverless-offline]: https://www.npmjs.com/package/serverless-offline\n[ico-serverless-offline]: https://img.shields.io/npm/v/serverless-offline.svg\n[link-serverless-dynamodb-local]: https://www.npmjs.com/package/serverless-dynamodb-local\n[link-step-functions-offline]: https://www.npmjs.com/package/serverless-step-functions-offline\n[ico-step-functions-offline]: https://img.shields.io/npm/v/serverless-step-functions-offline.svg\n\n[comment]: # (Referenced issues)\n\n[link-135]: https://github.com/serverless-heaven/serverless-webpack/issues/135\n\n[link-83]: https://github.com/serverless-heaven/serverless-webpack/pull/83\n[link-88]: https://github.com/serverless-heaven/serverless-webpack/pull/88\n[link-127]: https://github.com/serverless-heaven/serverless-webpack/pull/127\n[link-131]: https://github.com/serverless-heaven/serverless-webpack/pull/131\n[link-132]: https://github.com/serverless-heaven/serverless-webpack/pull/132\n[link-140]: https://github.com/serverless-heaven/serverless-webpack/pull/140\n[link-141]: https://github.com/serverless-heaven/serverless-webpack/issues/141\n[link-144]: https://github.com/serverless-heaven/serverless-webpack/issues/144\n\n[link-11]: https://github.com/serverless-heaven/serverless-webpack/issues/11\n[link-107]: https://github.com/serverless-heaven/serverless-webpack/issues/107\n[link-129]: https://github.com/serverless-heaven/serverless-webpack/pull/129\n[link-154]: https://github.com/serverless-heaven/serverless-webpack/issues/154\n[link-159]: https://github.com/serverless-heaven/serverless-webpack/issues/159\n\n[link-158]: https://github.com/serverless-heaven/serverless-webpack/issues/158\n[link-165]: https://github.com/serverless-heaven/serverless-webpack/issues/165\n\n[link-193]: https://github.com/serverless-heaven/serverless-webpack/issues/193\n\n[link-116]: https://github.com/serverless-heaven/serverless-webpack/issues/116\n[link-117]: https://github.com/serverless-heaven/serverless-webpack/issues/117\n[link-120]: https://github.com/serverless-heaven/serverless-webpack/issues/120\n[link-145]: https://github.com/serverless-heaven/serverless-webpack/issues/145\n[link-151]: https://github.com/serverless-heaven/serverless-webpack/issues/151\n[link-152]: https://github.com/serverless-heaven/serverless-webpack/issues/152\n[link-173]: https://github.com/serverless-heaven/serverless-webpack/issues/173\n[link-179]: https://github.com/serverless-heaven/serverless-webpack/pull/179\n[link-185]: https://github.com/serverless-heaven/serverless-webpack/pull/185\n[link-186]: https://github.com/serverless-heaven/serverless-webpack/pull/186\n\n[link-202]: https://github.com/serverless-heaven/serverless-webpack/issues/202\n\n[link-215]: https://github.com/serverless-heaven/serverless-webpack/issues/215\n[link-217]: https://github.com/serverless-heaven/serverless-webpack/issues/217\n[link-221]: https://github.com/serverless-heaven/serverless-webpack/pull/221\n[link-223]: https://github.com/serverless-heaven/serverless-webpack/issues/223\n[link-227]: https://github.com/serverless-heaven/serverless-webpack/pull/227\n[link-234]: https://github.com/serverless-heaven/serverless-webpack/pull/234\n\n[link-245]: https://github.com/serverless-heaven/serverless-webpack/issues/245\n\n[link-251]: https://github.com/serverless-heaven/serverless-webpack/issues/251\n\n[link-126]: https://github.com/serverless-heaven/serverless-webpack/issues/126\n[link-247]: https://github.com/serverless-heaven/serverless-webpack/issues/247\n[link-250]: https://github.com/serverless-heaven/serverless-webpack/issues/250\n[link-254]: https://github.com/serverless-heaven/serverless-webpack/pull/254\n[link-260]: https://github.com/serverless-heaven/serverless-webpack/issues/260\n[link-264]: https://github.com/serverless-heaven/serverless-webpack/pull/264\n[link-265]: https://github.com/serverless-heaven/serverless-webpack/pull/265\n\n[link-272]: https://github.com/serverless-heaven/serverless-webpack/issues/272\n[link-278]: https://github.com/serverless-heaven/serverless-webpack/pull/278\n[link-279]: https://github.com/serverless-heaven/serverless-webpack/issues/279\n[link-276]: https://github.com/serverless-heaven/serverless-webpack/issues/276\n[link-269]: https://github.com/serverless-heaven/serverless-webpack/issues/269\n\n[link-263]: https://github.com/serverless-heaven/serverless-webpack/issues/263\n\n[link-286]: https://github.com/serverless-heaven/serverless-webpack/issues/286\n\n[link-315]: https://github.com/serverless-heaven/serverless-webpack/issues/315\n[link-316]: https://github.com/serverless-heaven/serverless-webpack/issues/316\n[link-253]: https://github.com/serverless-heaven/serverless-webpack/issues/253\n[link-317]: https://github.com/serverless-heaven/serverless-webpack/pull/317\n[link-321]: https://github.com/serverless-heaven/serverless-webpack/pull/321\n\n[link-313]: https://github.com/serverless-heaven/serverless-webpack/pull/313\n[link-326]: https://github.com/serverless-heaven/serverless-webpack/pull/326\n[link-329]: https://github.com/serverless-heaven/serverless-webpack/issues/329\n\n[link-232]: https://github.com/serverless-heaven/serverless-webpack/issues/232\n[link-331]: https://github.com/serverless-heaven/serverless-webpack/issues/331\n[link-328]: https://github.com/serverless-heaven/serverless-webpack/pull/328\n[link-336]: https://github.com/serverless-heaven/serverless-webpack/pull/336\n[link-337]: https://github.com/serverless-heaven/serverless-webpack/pull/337\n\n[link-275]: https://github.com/serverless-heaven/serverless-webpack/issues/275\n[link-286]: https://github.com/serverless-heaven/serverless-webpack/issues/286\n[link-341]: https://github.com/serverless-heaven/serverless-webpack/issues/341\n[link-342]: https://github.com/serverless-heaven/serverless-webpack/issues/342\n[link-343]: https://github.com/serverless-heaven/serverless-webpack/issues/343\n\n[link-349]: https://github.com/serverless-heaven/serverless-webpack/issues/349\n[link-354]: https://github.com/serverless-heaven/serverless-webpack/pull/354\n[link-355]: https://github.com/serverless-heaven/serverless-webpack/pull/355\n",
    "licenseText": "MIT License\n\nCopyright (c) 2016-2017 Nicola Peduzzi / Frank Schmid\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/serverless-webpack/-/serverless-webpack-5.1.1.tgz#2ff8d1d48c4103104bc1ea8aaa7aee9a4e337af4",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/serverless-webpack/-/serverless-webpack-5.1.1.tgz",
    "hash": "2ff8d1d48c4103104bc1ea8aaa7aee9a4e337af4",
    "registry": "npm",
    "packageName": "serverless-webpack"
  },
  "registry": "npm",
  "hash": "2ff8d1d48c4103104bc1ea8aaa7aee9a4e337af4"
}