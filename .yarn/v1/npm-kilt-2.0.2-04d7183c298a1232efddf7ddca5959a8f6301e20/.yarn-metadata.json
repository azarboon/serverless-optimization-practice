{
  "manifest": {
    "name": "kilt",
    "description": "Combines multiple event emitters into a single emitter",
    "version": "2.0.2",
    "repository": {
      "type": "git",
      "url": "git://github.com/hapijs/kilt"
    },
    "main": "lib/index.js",
    "keywords": [
      "emitter",
      "merge",
      "combine"
    ],
    "engines": {
      "node": ">=4.0.0"
    },
    "dependencies": {
      "hoek": "4.x.x"
    },
    "devDependencies": {
      "code": "3.x.x",
      "lab": "10.x.x"
    },
    "scripts": {
      "test": "lab -a code -t 100 -L",
      "test-cov-html": "lab -r html -o coverage.html -a code -L"
    },
    "license": "BSD-3-Clause",
    "_registry": "npm",
    "_loc": "/Users/mahdi.azarboon/Documents/dev-unsynced/optimization-practice/.yarn/v1/npm-kilt-2.0.2-04d7183c298a1232efddf7ddca5959a8f6301e20/package.json",
    "readmeFilename": "README.md",
    "readme": "#kilt\n\nCombines multiple event emitters into a single emitter.\n\n[![Build Status](https://secure.travis-ci.org/hapijs/kilt.svg)](http://travis-ci.org/hapijs/kilt)\n\nLead Maintainer - [Emily Rose](https://github.com/nexxy)\n\n## Usage\n\nInstallation:\n\n```bash\n$ npm install --save kilt\n```\n\nInstantiate a kilt instance with the event emitters to combine and listen for\nevents on the new kilt instance. Kilt derives from `EventEmitter` and may also\nbe used to emit events.\n\n```js\nvar Events = require('events');\nvar Kilt   = require('kilt');\n\nvar emitter1 = new Events.EventEmitter();\nvar emitter2 = new Events.EventEmitter();\n\nvar kilt = new Kilt([emitter1, emitter2]);\n\n// A single handler for both emitters.\nkilt.on('hello', function (data) {\n    console.log(data);\n});\n\n// Emit events from multiple emitters.\nemitter1.emit('hello', 'Hello from emitter1');\nemitter2.emit('hello', 'Hello from emitter2');\n\n// Emit a event using kilt.\nkilt.emit('hello', 'Hello from Kilt');\n```\n\nOutput:\n\n```bash\nHello from emitter1\nHello from emitter2\nHello from kilt\n```\n\n### Methods\n\n#### `Kilt([emitter(s)])`\n\nKilt constructor which accepts optional emitters to manage.\n\n```js\nvar kilt = new Kilt();\n... = new Kilt(emitter);\n... = new Kilt([emitter]);\n... = new Kilt([emitter1, emitter2]);\n```\n\n##### `addEmitter(emitter)`\n\nAdd an emitter for kilt to manage.\n\n```js\nvar emitter = new Events.Emitter();\nkilt.addEmitter(emitter);\n```\n\n##### `on(type, listener)`\n\nAttach a listener to all emitters with the specified type.\n\n```js\nkilt.on('example', function (data) {\n    console.log(data);\n});\n```\n\n##### `once(type, listener)`\n\nAttach a listener to all emitters with the specified type that will only fire\nonce.\n\n```js\nkilt.once('example', console.log.bind(console, '\"example\" event emitted once with data:'));\n```\n\n##### `removeListener(type, listener)`\n\nRemove the specified listener.\n\n```js\nvar emitter = new Events.Emitter();\nvar listener = function () {\n    return;\n};\n\nkilt.addEmitter(emitter);\n\n// Attach listener.\nkilt.on('example', listener);\n\n// Remove listener.\nkilt.removeListener('example', listener);\n```\n\n##### `removeAllListeners([type])`\n\nRemove all listeners. Optionally, you may specify the type of listeners to\nremove.\n\n```js\n// Attach listeners.\nkilt.on('example', ...);\nkilt.on('example', ...);\nkilt.on('example', ...);\nkilt.on('other', ...);\n\n// Only remove listeners of a specific type.\nkilt.removeAllListeners('example');\n\n// Remove all listeners.\nkilt.removeAllListeners();\n```\n\n##### `emit(type[, data])`\n\nEmit the specified event with the specified, optional data.\n\n```js\nvar emitter = new Events.Emitter();\nvar kilt = new Kilt(emitter);\n\n// Attach listener.\nkilt.on('example', console.log.bind(console, '\"example\" event emitted with data:'));\n\n// Emit event on kilt.\nkilt.emit('example', 'emitted');\n```\n",
    "licenseText": "Copyright (c) 2014-2016, Project contributors\nCopyright (c) 2014, Walmart\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * The names of any contributors may not be used to endorse or promote\n      products derived from this software without specific prior written\n      permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n                                  *   *   *\n\nThe complete list of contributors can be found at: https://github.com/hapijs/kilt/graphs/contributors\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/kilt/-/kilt-2.0.2.tgz#04d7183c298a1232efddf7ddca5959a8f6301e20",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/kilt/-/kilt-2.0.2.tgz",
    "hash": "04d7183c298a1232efddf7ddca5959a8f6301e20",
    "registry": "npm",
    "packageName": "kilt"
  },
  "registry": "npm",
  "hash": "04d7183c298a1232efddf7ddca5959a8f6301e20"
}