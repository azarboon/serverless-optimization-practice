{
  "manifest": {
    "name": "items",
    "description": "Bare minimum async methods",
    "version": "2.1.1",
    "repository": {
      "type": "git",
      "url": "git://github.com/hapijs/items"
    },
    "main": "lib/index.js",
    "keywords": [
      "async",
      "serial",
      "parallel"
    ],
    "engines": {
      "node": ">=4.0.0"
    },
    "dependencies": {},
    "devDependencies": {
      "code": "3.x.x",
      "lab": "10.x.x"
    },
    "scripts": {
      "test": "lab -a code -t 100 -L",
      "test-cov-html": "lab -a code -r html -o coverage.html"
    },
    "license": "BSD-3-Clause",
    "_registry": "npm",
    "_loc": "/Users/mahdi.azarboon/Documents/dev-unsynced/optimization-practice/.yarn/v1/npm-items-2.1.1-8bd16d9c83b19529de5aea321acaada78364a198/package.json",
    "readmeFilename": "README.md",
    "readme": "#items\n\nBare minimum async methods adapted specifically for the very limited **hapi** core use cases. Use\n[async](https://github.com/caolan/async) for all your application needs.\n\n[![Build Status](https://secure.travis-ci.org/hapijs/items.png)](http://travis-ci.org/hapijs/items)\n\nLead Maintainer - [Raquel VÃ©lez](https://github.com/rockbot)\n\n## `Items.serial(items, method, callback)`\n\nRuns `method` against each value in the `items` array *in series*. `callback` is executed when all of the tasks are complete. Calling back with an error will short-circuit the remaining tasks.\n\n- `items` an array of items to pass to `method`.\n- `method` a function with the signature `function (item, next, i)`.\n    - `item` - is the currently processing item in the `items` array.\n    - `next` - callback function to indicate the end of processing for `item`. Calling `next` with a truthy parameter indicates an error and ends `Items.serial`.\n    - `i` - The current item's index in the `items` array.\n- `callback` - a function with the signature `function (err)`.\n    - `err` - indicates any errors during processing.\n\n## `Items.parallel(items, method, callback)`\n\nRuns `method` against each value in the `items` array *in parallel*. `callback` is executed when all of the tasks are complete. Calling back with an error will short-circuit the remaining tasks.\n\n- `items` an array of items to pass to `method`.\n- `method` a function with the signature `function (item, next, i)`.\n    - `item` - is the currently processing item in the `items` array.\n    - `next` - callback function to indicate the end of processing for `item`. Calling `next` with a truthy parameter indicates an error and ends `Items.parallel`.\n    - `i` - The current item's index in the `items` array.\n- `callback` - a function with the signature `function (err)`.\n    - `err` - indicates any errors during processing.\n\n## `Items.parallel.execute(tasks, callback)`\n\nRuns all of the functions in `tasks` *in parallel* and stores the results in a collector object passed into `callback`. If any of the tasks callback with an error, the collector object is `null`.\n\n- `tasks` - on object containing functions to execute in parallel. The `key` of the function is the `key` in the result of collector object. The task should have the signature `function (next)`\n    - `next(err, result)` - callback function to indicate the end of processing for the current task.\n        - `err` - indicates any errors during processing.\n        - `result` - result of this function. This value will be set on the collector object in the final callback.\n- `callback(err, result)`\n    - `err` - any errors reported by *any* of the `tasks`.\n    - `result` - an object containing the result of running all of the `tasks`. `result` will be `null` if any of the tasks callback with an error. The `result.key` will be the corresponding `key` of the `tasks` object.\n",
    "licenseText": "Copyright (c) 2014-2016, Project contributors\nCopyright (c) 2014, Walmart\nCopyright (c) 2010-2014 Caolan McMahon\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * The names of any contributors may not be used to endorse or promote\n      products derived from this software without specific prior written\n      permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n                                  *   *   *\n\nPortions of this repository were adapted from https://github.com/caolan/async, which is published\nunder the following license: https://github.com/caolan/async/blob/master/LICENSE\nThe complete list of contributors can be found at: https://github.com/hapijs/items/graphs/contributors\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/items/-/items-2.1.1.tgz#8bd16d9c83b19529de5aea321acaada78364a198",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/items/-/items-2.1.1.tgz",
    "hash": "8bd16d9c83b19529de5aea321acaada78364a198",
    "registry": "npm",
    "packageName": "items"
  },
  "registry": "npm",
  "hash": "8bd16d9c83b19529de5aea321acaada78364a198"
}