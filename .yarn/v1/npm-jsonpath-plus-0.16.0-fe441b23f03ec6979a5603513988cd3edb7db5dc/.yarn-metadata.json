{
  "manifest": {
    "author": {
      "name": "Stefan Goessner"
    },
    "name": "jsonpath-plus",
    "description": "A JS implementation of JSONPath with some additional operators",
    "contributors": [
      {
        "name": "Prof. GÃ¶ssner",
        "email": "stefan.goessner@fh-dortmund.de"
      },
      {
        "name": "Subbu Allamaraju",
        "email": "subbu@subbu.org"
      },
      {
        "name": "Mike Brevoort",
        "email": "mike@brevoort.com"
      },
      {
        "name": "Robert Krahn",
        "email": "robert.krahn@gmail.com"
      },
      {
        "name": "Brett Zamir",
        "email": "brettz9@yahoo.com"
      },
      {
        "name": "Richard Schneider",
        "email": "makaretu@gmail.com"
      }
    ],
    "license": "MIT",
    "version": "0.16.0",
    "repository": {
      "type": "git",
      "url": "git://github.com/s3u/JSONPath.git"
    },
    "bugs": {
      "url": "https://github.com/s3u/JSONPath/issues/"
    },
    "homepage": "https://github.com/s3u/JSONPath",
    "main": "./lib/jsonpath",
    "dependencies": {},
    "engines": {
      "node": ">=0.8"
    },
    "devDependencies": {
      "eslint": "^1.10.3",
      "eslint-config-standard": "^4.4.0",
      "eslint-plugin-standard": "^1.3.1",
      "nodeunit": "0.9.0",
      "remark-lint": "^3.0.0",
      "remark": "^4.1.2"
    },
    "keywords": [
      "json",
      "jsonpath"
    ],
    "scripts": {
      "eslint": "./node_modules/.bin/eslint test lib test-helpers",
      "remark": "./node_modules/.bin/remark -q -f .",
      "lint": "npm run eslint && npm run remark",
      "nodeunit": "./node_modules/.bin/nodeunit test",
      "test": "npm run lint && npm run nodeunit",
      "browser-test": "npm run lint && node ./test-helpers/nodeunit-server",
      "start": "npm run browser-test"
    },
    "_registry": "npm",
    "_loc": "/Users/mahdi.azarboon/Documents/dev-unsynced/optimization-practice/.yarn/v1/npm-jsonpath-plus-0.16.0-fe441b23f03ec6979a5603513988cd3edb7db5dc/package.json",
    "readmeFilename": "README.md",
    "readme": "# JSONPath Plus [![build status](https://secure.travis-ci.org/s3u/JSONPath.png)](http://travis-ci.org/s3u/JSONPath)\n\nAnalyse, transform, and selectively extract data from JSON\ndocuments (and JavaScript objects).\n\n**Note that `jsonpath-plus` is currently suffering from [performance problems](https://github.com/s3u/JSONPath/issues/14)\nand the maintainers are not currently able to work on resolving.\nYou may wish to use [jsonpath](https://www.npmjs.com/package/jsonpath)\nto avoid this problem (though noting that it does not include the\nproprietary features added to `jsonpath-plus`).**\n\n# Install\n\n```shell\n  npm install jsonpath-plus\n```\n\n# Usage\n\n## Syntax\n\nIn Node.js:\n\n```js\n  var JSONPath = require('jsonpath-plus');\n  var result = JSONPath({json: obj, path: path});\n```\n\nFor browser usage you can directly include `lib/jsonpath.js`; no Browserify\nmagic is necessary:\n\n```html\n  <script src=\"lib/jsonpath.js\"></script>\n  <script>\n      var result = JSONPath({path: path, json: obj});\n  </script>\n```\n\nThe full signature available is:\n\n```js\n    var result = JSONPath([options,] path, json, callback, otherTypeCallback);\n```\n\nThe arguments `path`, `json`, `callback`, and `otherTypeCallback`\ncan alternatively be expressed (along with any other of the\navailable properties) on `options`.\n\nNote that `result` will contain all items found (optionally\nwrapped into an array) whereas `callback` can be used if you\nwish to perform some operation as each item is discovered, with\nthe callback function being executed 0 to N times depending\non the number of independent items to be found in the result.\nSee the docs below for more on `JSONPath`'s available arguments.\n\nThe following format is now deprecated:\n\n```js\n  jsonPath.eval(options, json, path);\n```\n\n## Properties\n\nThe properties that can be supplied on the options object or\nevaluate method (as the first argument) include:\n\n- ***path*** (**required**) - The JSONPath expression as a (normalized\n  or unnormalized) string or array\n- ***json*** (**required**) - The JSON object to evaluate (whether of\n  null, boolean, number, string, object, or array type).\n- ***autostart*** (**default: true**) - If this is supplied as `false`,\n  one may call the `evaluate` method manually.\n- ***flatten*** (**default: false**) - Whether the returned array of results\n  will be flattened to a single dimension array.\n- ***resultType*** (**default: \"value\"**) - Can be case-insensitive form of\n  \"value\", \"path\", \"pointer\", \"parent\", or \"parentProperty\" to determine\n  respectively whether to return results as the values of the found items,\n  as their absolute paths, as [JSON Pointers](http://www.rfc-base.org/txt/rfc-6901.txt)\n  to the absolute paths, as their parent objects, or as their parent's\n  property name. If set to \"all\", all of these types will be returned on\n  an object with the type as key name.\n- ***sandbox*** (**default: {}**) - Key-value map of variables to be\n  available to code evaluations such as filtering expressions. (Note\n  that the current path and value will also be available to those\n  expressions; see the Syntax section for details.)\n- ***wrap*** (**default: true**) - Whether or not to wrap the results\n  in an array. If `wrap` is set to false, and no results are found,\n  `undefined` will be returned (as opposed to an empty array when\n  `wrap` is set to true). If `wrap` is set to false and a single result\n  is found, that result will be the only item returned (not within\n  an array). An array will still be returned if multiple results are\n  found, however. To avoid ambiguities (in the case where it is necessary\n  to distinguish between a result which is a failure and one which is an\n  empty array), it is recommended to switch the default to `false`.\n- ***preventEval*** (**default: false**) - Although JavaScript evaluation\n  expressions are allowed by default, for security reasons (if one is\n  operating on untrusted user input, for example), one may wish to\n  set this option to `true` to throw exceptions when these expressions\n  are attempted.\n- ***parent*** (**default: null**) - In the event that a query could be\n  made to return the root node, this allows the parent of that root node\n  to be returned within results.\n- ***parentProperty*** (**default: null**) - In the event that a query\n  could be made to return the root node, this allows the `parentProperty`\n  of that root node to be returned within results.\n- ***callback*** (**default: (none)**) - If supplied, a callback will be\n  called immediately upon retrieval of an end point value. The three arguments\n  supplied will be the value of the payload (according to `resultType`),\n  the type of the payload (whether it is a normal \"value\" or a \"property\"\n  name), and a full payload object (with all `resultType`s).\n- ***otherTypeCallback*** (**default: \\<A function that throws an error**\n  **when @other() is encountered\\>**) - In the current absence of JSON\n  Schema support, one can determine types beyond the built-in types by\n  adding the operator `@other()` at the end of one's query. If such a\n  path is encountered, the `otherTypeCallback` will be invoked with the\n  value of the item, its path, its parent, and its parent's property name,\n  and it should return a boolean indicating whether the supplied value\n  belongs to the \"other\" type or not (or it may handle transformations and\n  return false).\n\n## Instance methods\n\n- ***evaluate(path, json, callback, otherTypeCallback)*** OR\n  ***evaluate({path: \\<path\\>, json: \\<json object\\>, callback:***\n  ***\\<callback function\\>, otherTypeCallback:***\n  ***\\<otherTypeCallback function\\>})*** - This method is only\n  necessary if the `autostart` property is set to `false`. It\n  can be used for repeated evaluations using the same configuration.\n  Besides the listed properties, the latter method pattern can\n  accept any of the other allowed instance properties (except\n  for `autostart` which would have no relevance here).\n\n## Class properties and methods\n\n- ***JSONPath.cache*** - Exposes the cache object for those who wish\n  to preserve and reuse it for optimization purposes.\n- ***JSONPath.toPathArray(pathAsString)*** - Accepts a normalized or\n  unnormalized path as string and converts to an array: for\n  example, `['$', 'aProperty', 'anotherProperty']`.\n- ***JSONPath.toPathString(pathAsArray)*** - Accepts a path array and\n  converts to a normalized path string. The string will be in a form\n  like: `$['aProperty']['anotherProperty][0]`. The JSONPath terminal\n  constructions `~` and `^` and type operators like `@string()` are\n  silently stripped.\n- ***JSONPath.toPointer(pathAsArray)*** - Accepts a path array and\n  converts to a [JSON Pointer](http://www.rfc-base.org/txt/rfc-6901.txt).\n  The string will be in a form like: `'/aProperty/anotherProperty/0`\n  (with any `~` and `/` internal characters escaped as per the JSON\n  Pointer spec). The JSONPath terminal constructions `~` and `^` and\n  type operators like `@string()` are silently stripped.\n\n# Syntax through examples\n\nGiven the following JSON, taken from <http://goessner.net/articles/JsonPath/>:\n\n```json\n  {\n    \"store\": {\n      \"book\": [\n        {\n          \"category\": \"reference\",\n          \"author\": \"Nigel Rees\",\n          \"title\": \"Sayings of the Century\",\n          \"price\": 8.95\n        },\n        {\n          \"category\": \"fiction\",\n          \"author\": \"Evelyn Waugh\",\n          \"title\": \"Sword of Honour\",\n          \"price\": 12.99\n        },\n        {\n          \"category\": \"fiction\",\n          \"author\": \"Herman Melville\",\n          \"title\": \"Moby Dick\",\n          \"isbn\": \"0-553-21311-3\",\n          \"price\": 8.99\n        },\n        {\n          \"category\": \"fiction\",\n          \"author\": \"J. R. R. Tolkien\",\n          \"title\": \"The Lord of the Rings\",\n          \"isbn\": \"0-395-19395-8\",\n          \"price\": 22.99\n        }\n      ],\n      \"bicycle\": {\n        \"color\": \"red\",\n        \"price\": 19.95\n      }\n    }\n  }\n```\n\nand the following XML representation:\n\n```xml\n<store>\n    <book>\n        <category>reference</category>\n        <author>Nigel Rees</author>\n        <title>Sayings of the Century</title>\n        <price>8.95</price>\n    </book>\n    <book>\n        <category>fiction</category>\n        <author>Evelyn Waugh</author>\n        <title>Sword of Honour</title>\n        <price>12.99</price>\n    </book>\n    <book>\n        <category>fiction</category>\n        <author>Herman Melville</author>\n        <title>Moby Dick</title>\n        <isbn>0-553-21311-3</isbn>\n        <price>8.99</price>\n    </book>\n    <book>\n        <category>fiction</category>\n        <author>J. R. R. Tolkien</author>\n        <title>The Lord of the Rings</title>\n        <isbn>0-395-19395-8</isbn>\n        <price>22.99</price>\n    </book>\n    <bicycle>\n        <color>red</color>\n        <price>19.95</price>\n    </bicycle>\n</store>\n```\n\nPlease note that the XPath examples below do not distinguish between\nretrieving elements and their text content (except where useful for\ncomparisons or to prevent ambiguity).\n\n| XPath             | JSONPath               | Result                                | Notes |\n| ----------------- | ---------------------- | ------------------------------------- | ----- |\n/store/book/author  | $.store.book\\[*].author | The authors of all books in the store | Can also be represented without the `$.` as `store.book[*].author` (though this is not present in the original spec)\n//author            | $..author              | All authors                           |\n/store/*            | $.store.*              | All things in store, which are its books (a book array) and a red bicycle (a bicycle object).|\n/store//price       | $.store..price         | The price of everything in the store. |\n//book\\[3]           | $..book\\[2]             | The third book (book object)          |\n//book\\[last()]      | $..book\\[(@.length-1)]<br>$..book\\[-1:]  | The last book in order.| To access a property with a special character, utilize `[(@['...'])]` for the filter (this particular feature is not present in the original spec)\n//book\\[position()<3]| $..book\\[0,1]<br>$..book\\[:2]| The first two books               |\n//book/*\\[self::category\\|self::author] or //book/(category,author) in XPath 2.0 | $..book\\[0]\\[category,author]| The categories and authors of all books |\n//book\\[isbn]        | $..book\\[?(@.isbn)]     | Filter all books with an ISBN number     | To access a property with a special character, utilize `[?@['...']]` for the filter (this particular feature is not present in the original spec)\n//book\\[price<10]    | $..book\\[?(@.price<10)] | Filter all books cheaper than 10     |\n| //\\*\\[name() = 'price' and . != 8.95] | $..\\*\\[?(@property === 'price' && @ !== 8.95)] | Obtain all property values of objects whose property is price and which does not equal 8.95 |\n/                   | $                      | The root of the JSON object (i.e., the whole object itself) |\n//\\*/\\*\\|//\\*/\\*/text()  | $..*                   | All Elements (and text) beneath root in an XML document. All members of a JSON structure beneath the root. |\n//*                 | $..                    | All Elements in an XML document. All parent components of a JSON structure including root. | This behavior was not directly specified in the original spec\n//*\\[price>19]/..    | $..\\[?(@.price>19)]^    | Parent of those specific items with a price greater than 19 (i.e., the store value as the parent of the bicycle and the book array as parent of an individual book) | Parent (caret) not documented in the original spec\n/store/*/name() (in XPath 2.0)  | $.store.*~ | The property names of the store sub-object (\"book\" and \"bicycle\"). Useful with wildcard properties. | Property name (tilde) is not present in the original spec\n/store/book\\[not(. is /store/book\\[1\\])\\] (in XPath 2.0) | $.store.book\\[?(@path !== \"$\\[\\'store\\']\\[\\'book\\']\\[0]\")] | All books besides that at the path pointing to the first | @path not present in the original spec\n//book\\[parent::\\*/bicycle/color = \"red\"]/category | $..book\\[?(@parent.bicycle && @parent.bicycle.color === \"red\")].category | Grabs all categories of books where the parent object of the book has a bicycle child whose color is red (i.e., all the books) | @parent is not present in the original spec\n//book/*\\[name() != 'category']     | $..book.*\\[?(@property !== \"category\")] | Grabs all children of \"book\" except for \"category\" ones  | @property is not present in the original spec\n//book/*\\[position() != 0]    | $..book\\[?(@property !== 0)] | Grabs all books whose property (which, being that we are reaching inside an array, is the numeric index) is not 0 | @property is not present in the original spec\n/store/\\*/\\*\\[name(parent::*) != 'book'] | $.store.*\\[?(@parentProperty !== \"book\")] | Grabs the grandchildren of store whose parent property is not book (i.e., bicycle's children, \"color\" and \"price\") | @parentProperty is not present in the original spec\n//book\\[count(preceding-sibling::\\*) != 0]/\\*/text() | $..book.*\\[?(@parentProperty !== 0)]  | Get the property values of all book instances whereby the parent property of these values (i.e., the array index holding the book item parent object) is not 0 | @parentProperty is not present in the original spec\n//book/../\\*\\[. instance of element(\\*, xs:decimal)\\] (in XPath 2.0) | $..book..\\*@number() | Get the numeric values within the book array | @number(), the other basic types (@boolean(), @string()), other low-level derived types (@null(), @object(), @array()), the JSONSchema-added type, @integer(), the compound type @scalar() (which also accepts `undefined` and non-finite numbers for JavaScript objects as well as all of the basic non-object/non-function types), the type, @other(), to be used in conjunction with a user-defined callback (see `otherTypeCallback`) and the following non-JSON types that can nevertheless be used with JSONPath when querying non-JSON JavaScript objects (@undefined(), @function(), @nonFinite()) are not present in the original spec\n| | `` ` `` (e.g., `` `$`` to match a property literally named `$`) | Escapes the entire sequence following (to be treated as a literal) | `\\`` is not present in the original spec\n\nAny additional variables supplied as properties on the optional \"sandbox\"\nobject option are also available to (parenthetical-based)\nevaluations.\n\n# Potential sources of confusion for XPath users\n\n1. In JSONPath, a filter expression, in addition to its `@` being a\nreference to its children, actually selects the immediate children\nas well, whereas in XPath, filter conditions do not select the children\nbut delimit which of its parent nodes will be obtained in the result.\n1. In JSONPath, array indexes are, as in JavaScript, 0-based (they begin\nfrom 0), whereas in XPath, they are 1-based.\n1. In JSONPath, equality tests utilize (as per JavaScript) multiple equal signs\nwhereas in XPath, they use a single equal sign.\n\n# Ideas\n\n1. Support OR outside of filters (as in XPath `|`) and grouping.\n1. Create syntax to work like XPath filters in not selecting children?\n1. Allow option for parentNode equivalent (maintaining entire chain of\n    parent-and-parentProperty objects up to root)\n\n# Development\n\nRunning the tests on Node:\n\n```shell\nnpm test\n```\n\nFor in-browser tests:\n\n- Serve the js/html files:\n\n```shell\nnpm run browser-test\n```\n\n- Visit [http://localhost:8082/test/](http://localhost:8082/test/).\n\n# License\n\n[MIT License](http://www.opensource.org/licenses/mit-license.php).\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/jsonpath-plus/-/jsonpath-plus-0.16.0.tgz#fe441b23f03ec6979a5603513988cd3edb7db5dc",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/jsonpath-plus/-/jsonpath-plus-0.16.0.tgz",
    "hash": "fe441b23f03ec6979a5603513988cd3edb7db5dc",
    "registry": "npm",
    "packageName": "jsonpath-plus"
  },
  "registry": "npm",
  "hash": "fe441b23f03ec6979a5603513988cd3edb7db5dc"
}