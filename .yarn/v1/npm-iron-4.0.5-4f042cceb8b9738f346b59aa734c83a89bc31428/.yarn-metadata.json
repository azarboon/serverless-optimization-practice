{
  "manifest": {
    "name": "iron",
    "description": "Encapsulated tokens (encrypted and mac'ed objects)",
    "version": "4.0.5",
    "author": {
      "name": "Eran Hammer",
      "email": "eran@hammer.io",
      "url": "http://hueniverse.com"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/hueniverse/iron"
    },
    "main": "lib/index.js",
    "keywords": [
      "authentication",
      "encryption",
      "data integrity"
    ],
    "engines": {
      "node": ">=4.0.0"
    },
    "dependencies": {
      "hoek": "4.x.x",
      "boom": "5.x.x",
      "cryptiles": "3.x.x"
    },
    "devDependencies": {
      "code": "4.x.x",
      "lab": "13.x.x"
    },
    "scripts": {
      "test": "lab -a code -t 100 -L",
      "test-cov-html": "lab -a code -r html -o coverage.html"
    },
    "license": "BSD-3-Clause",
    "_registry": "npm",
    "_loc": "/Users/mahdi.azarboon/Documents/dev-unsynced/optimization-practice/.yarn/v1/npm-iron-4.0.5-4f042cceb8b9738f346b59aa734c83a89bc31428/package.json",
    "readmeFilename": "README.md",
    "readme": "# iron\n\n<img align=\"right\" src=\"https://raw.github.com/hueniverse/iron/master/images/logo.png\" /> **iron** is a cryptographic\nutility for sealing a JSON object using symmetric key encryption with message integrity verification. Or in other words,\nit lets you encrypt an object, send it around (in cookies, authentication credentials, etc.), then receive it back and\ndecrypt it. The algorithm ensures that the message was not tampered with, and also provides a simple mechanism for\npassword rotation.\n\nCurrent version: **4.x**\n\nNote: the wire protocol has not changed since 1.x (the version increments reflected a change in\nthe internal error format used by the module and by the node API as well as other node API changes).\n\n[![Build Status](https://secure.travis-ci.org/hueniverse/iron.png)](http://travis-ci.org/hueniverse/iron)\n\n\n# Table of Content\n\n- [**Introduction**](#introduction)\n<p></p>\n- [Usage](#usage)\n  - [Options](#options)\n<p></p>\n- [**Security Considerations**](#security-considerations)\n  - [Plaintext Storage of Credentials](#plaintext-storage-of-credentials)\n<p></p>\n- [**Frequently Asked Questions**](#frequently-asked-questions)\n<p></p>\n- [**Acknowledgements**](#acknowledgements)\n\n# Introduction\n\n**iron** provides methods for encrypting an object, generating a message authentication code (MAC), and serializing both\ninto a cookie / URI / HTTP header friendly format. Sealed objects are useful in cases where state has to reside on other\napplications not under your control, without exposing the details of this state to those application.\n\nFor example, sealed objects allow you to encrypt the permissions granted to the authenticated user, store those permissions\nusing a cookie, without worrying about someone modifying (or even knowing) what those permissions are. Any modification to\nthe encrypted data will invalidate its integrity.\n\nThe seal process follows these general steps:\n\n- generate encryption salt `saltE`\n- derive an encryption key `keyE` using `saltE` and a password\n- generate an integrity salt `saltI`\n- derive an integrity (HMAC) key `keyI` using `saltI` and the password\n- generate a random [initialization vector](http://en.wikipedia.org/wiki/Initialization_vector) `iv`\n- encrypt the serialized object string using `keyE` and `iv`\n- mac the encrypted object along with `saltE` and `iv`\n- concatenate `saltE`, `saltI`, `iv`, and the encrypted object into a URI-friendly string\n\n\n# Usage\n\nTo seal an object:\n\n```javascript\nvar obj = {\n    a: 1,\n    b: 2,\n    c: [3, 4, 5],\n    d: {\n        e: 'f'\n    }\n};\n\nvar password = 'some_not_random_password_that_is_at_least_32_characters';\n\nIron.seal(obj, password, Iron.defaults, function (err, sealed) {\n\n    console.log(sealed);\n});\n```\n\nThe result `sealed` object is a string which can be sent via cookies, URI query parameter, or an HTTP header attribute.\nTo unseal the string:\n\n```javascript\nIron.unseal(sealed, password, Iron.defaults, function (err, unsealed) {\n\n    // unsealed has the same content as obj\n});\n```\n\n### Options\n\n**iron** provides a few options for customizing the key deriviation algorithm used to generate encryption and integrity\nverification keys as well as the algorithms and salt sizes used. The _'seal()'_ and _'unseal()'_ methods take an options\nobject with the following **required** keys:\n\n- `encryption` - defines the options used by the encryption process.\n- `integrity` - defines the options used by the HMAC integrity verification process.\n\nEach of these option objects includes the following **required** keys:\n\n- `saltBits` - the size of the salt (random buffer used to ensure that two identical objects will generate a different encrypted result.\n- `algorithm` - the algorithm used ('aes-256-cbc' for encryption and 'sha256' for integrity are the only two supported at this time).\n- `iterations` - the number of iterations used to derive a key from the password. Set to `1` by default. The number of ideal iterations\n  to use is dependent on your application's performance requirements. More iterations means it takes longer to generate the key.\n\nThe _'seal()'_ and _'unseal()'_ methods also take the following **optional** options keys:\n\n- `ttl` - sealed object lifetime in milliseconds where 0 means forever. Defaults to 0.\n- `timestampSkewSec` - number of seconds of permitted clock skew for incoming expirations. Defaults to 60 seconds.\n- `localtimeOffsetMsec` - local clock time offset, expressed in number of milliseconds (positive or negative). Defaults to 0.\n\n**iron** includes a default options object which can be passed to the methods as shown above in the example. The default\nsettings are:\n\n```javascript\nvar options = {\n    encryption: {\n        saltBits: 256,\n        algorithm: 'aes-256-cbc',\n        iterations: 1\n    },\n    integrity: {\n        saltBits: 256,\n        algorithm: 'sha256',\n        iterations: 1\n    },\n    ttl: 0,\n    timestampSkewSec: 60,\n    localtimeOffsetMsec: 0\n};\n```\n\nAlternatively, a Buffer object of sufficient size (matching the algorithm key size requirement) can be passed as the\npassword, in which case, `saltBits` and `iterations` are ignored and the buffer is used as-is.\n\n\n# Security Considerations\n\nThe greatest sources of security risks are usually found not in **iron** but in the policies and procedures surrounding its use.\nImplementers are strongly encouraged to assess how this module addresses their security requirements. This section includes\nan incomplete list of security considerations that must be reviewed and understood before using **iron**.\n\n\n### Plaintext Storage of Credentials\n\nThe **iron** password is only used to derive keys and is never sent or shared. However, in order to generate (and regenerate) the\nkeys used to encrypt the object and compute the request MAC, the server must have access to the password in plaintext form. This\nis in contrast, for example, to modern operating systems, which store only a one-way hash of user credentials.\n\nIf an attacker were to gain access to the password - or worse, to the server's database of all such password - he or she would be able\nto encrypt and decrypt any sealed object. Accordingly, it is critical that servers protect these passwords from unauthorized\naccess.\n\n\n# Frequently Asked Questions\n\n### Where is the protocol specification?\n\nIf you are looking for some prose explaining how all this works, there isn't any. **iron** is being developed as an open source\nproject instead of a standard. In other words, the [code](/lib) is the specification. Not sure about\nsomething? Open an issue!\n\n\n### Is it done?\n\nYep.\n\n\n### How come the defaults must be manually passed and not automatically applied?\n\nBecause you should know what you are doing and explicitly set it. The options matter a lot to the security properties of the\nimplementation. While reasonable defaults are provided, you still need to explicitly state you want to use them.\n\n\n# Acknowledgements\n\nSpecial thanks to Adam Barth for his infinite patience, and always insightful feedback and advice.\n\nThe **iron** logo was based on original artwork created by [Chris Carrasco](http://chriscarrasco.com).\n",
    "licenseText": "Copyright (c) 2012-2017, Eran Hammer and Project contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * The names of any contributors may not be used to endorse or promote\n      products derived from this software without specific prior written\n      permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n                                  *   *   *\n\nThe complete list of contributors can be found at: https://github.com/hueniverse/iron/graphs/contributors\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/iron/-/iron-4.0.5.tgz#4f042cceb8b9738f346b59aa734c83a89bc31428",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/iron/-/iron-4.0.5.tgz",
    "hash": "4f042cceb8b9738f346b59aa734c83a89bc31428",
    "registry": "npm",
    "packageName": "iron"
  },
  "registry": "npm",
  "hash": "4f042cceb8b9738f346b59aa734c83a89bc31428"
}