{
  "manifest": {
    "name": "ts-node",
    "version": "3.3.0",
    "description": "TypeScript execution environment and REPL for node",
    "main": "dist/index.js",
    "bin": {
      "ts-node": "dist/bin.js",
      "_ts-node": "dist/_bin.js"
    },
    "files": [
      "dist/",
      "typings.js",
      "register.js",
      "LICENSE"
    ],
    "scripts": {
      "lint": "tslint \"src/**/*.ts\"",
      "clean": "rimraf dist",
      "tsc": "tsc",
      "build": "npm run clean && npm run tsc",
      "test-spec": "mocha dist/**/*.spec.js -R spec --bail",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- \"dist/**/*.spec.js\" -R spec --bail",
      "test": "npm run build && npm run lint && npm run test-cov",
      "prepublish": "typings install && npm run build"
    },
    "engines": {
      "node": ">=4.2.0"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/TypeStrong/ts-node.git"
    },
    "keywords": [
      "typescript",
      "node",
      "runtime",
      "environment",
      "ts",
      "compiler"
    ],
    "author": {
      "name": "Blake Embrey",
      "email": "hello@blakeembrey.com",
      "url": "http://blakeembrey.me"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/TypeStrong/ts-node/issues"
    },
    "homepage": "https://github.com/TypeStrong/ts-node",
    "devDependencies": {
      "@types/react": "^15.0.38",
      "chai": "^4.0.1",
      "istanbul": "^0.4.0",
      "mocha": "^3.0.0",
      "ntypescript": "^1.201507091536.1",
      "proxyquire": "^1.7.2",
      "react": "^15.6.1",
      "rimraf": "^2.5.4",
      "semver": "^5.1.0",
      "tslint": "^5.0.0",
      "tslint-config-standard": "^6.0.1",
      "typescript": "^2.4.1",
      "typings": "^2.0.0"
    },
    "dependencies": {
      "arrify": "^1.0.0",
      "chalk": "^2.0.0",
      "diff": "^3.1.0",
      "make-error": "^1.1.1",
      "minimist": "^1.2.0",
      "mkdirp": "^0.5.1",
      "source-map-support": "^0.4.0",
      "tsconfig": "^6.0.0",
      "v8flags": "^3.0.0",
      "yn": "^2.0.0"
    },
    "_registry": "npm",
    "_loc": "/Users/mahdi.azarboon/Documents/dev-unsynced/optimization-practice/.yarn/v1/npm-ts-node-3.3.0-c13c6a3024e30be1180dd53038fc209289d4bf69/package.json",
    "readmeFilename": "README.md",
    "readme": "# TypeScript Node\n\n[![NPM version][npm-image]][npm-url]\n[![NPM downloads][downloads-image]][downloads-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Greenkeeper badge](https://badges.greenkeeper.io/TypeStrong/ts-node.svg)](https://greenkeeper.io/)\n\n> TypeScript execution environment and REPL for node. **Works with `typescript@>=1.5`**.\n\n## Installation\n\n```sh\nnpm install -g ts-node\n\n# Install a TypeScript compiler (requires `typescript` by default).\nnpm install -g typescript\n```\n\n## Features\n\n* Execute TypeScript files with node\n* Interactive REPL\n* Execute (and print) TypeScript through the CLI\n* Uses source maps\n* Loads compiler options and `.d.ts` files from `tsconfig.json`\n\n## Usage\n\n```sh\n# Execute a script as you would normally with `node`.\nts-node script.ts\n\n# Starts the TypeScript REPL.\nts-node\n\n# Execute code with TypeScript.\nts-node -e 'console.log(\"Hello, world!\")'\n\n# Execute, and print, code with TypeScript.\nts-node -p '\"Hello, world!\"'\n\n# Pipe scripts to execute with TypeScript.\necho \"console.log('Hello, world!')\" | ts-node\n```\n\n![TypeScript REPL](https://github.com/TypeStrong/ts-node/raw/master/screenshot.png)\n\n### Mocha\n\n```sh\nmocha --compilers ts:ts-node/register,tsx:ts-node/register [...args]\n```\n\n### Tape\n\n```sh\nts-node node_modules/tape/bin/tape [...args]\n```\n\n### Gulp\n\n```sh\n# Just create a `gulpfile.ts` and run `gulp`.\ngulp\n```\n\n## How It Works\n\n**TypeScript Node** works by registering the TypeScript compiler for the `.ts`, `.tsx` and - when `allowJs` is enabled - `.js` extensions. When node.js has a file extension registered (the `require.extensions` object), it will use the extension internally with module resolution. By default, when an extension is unknown to node.js, it will fallback to handling the file as `.js` (JavaScript).\n\n**P.S.** This means that if you don't register an extension, it'll be compiled as JavaScript. When `ts-node` is used with `allowJs`, JavaScript files are transpiled using the TypeScript compiler.\n\n## Loading `tsconfig.json`\n\n**Typescript Node** uses `tsconfig.json` automatically, use `-n` to skip loading `tsconfig.json`.\n\n**NOTE**: You can use `ts-node` together with [tsconfig-paths](https://www.npmjs.com/package/tsconfig-paths) to load modules according to the `paths` section in `tsconfig.json`.\n\n## Configuration Options\n\nYou can set options by passing them in before the script.\n\n**Note:** These are in addition to the [node.js CLI arguments](https://nodejs.org/api/cli.html).\n\n```sh\nts-node --compiler ntypescript --project src --ignoreWarnings 2304 hello-world.ts\n```\n\n* **--project, -P** Path to load TypeScript configuration from (JSON file, a directory containing `tsconfig.json`, or `false` to disable) (also `process.env.TS_NODE_PROJECT`)\n* **--compiler, -C** Use a custom, require-able TypeScript compiler compatible with `typescript@>=1.5.0-alpha` (also `process.env.TS_NODE_COMPILER`)\n* **--ignore** Specify an array of regular expression strings for `ts-node` to skip compiling as TypeScript (defaults to `/node_modules/`, `false` to disable) (also `process.env.TS_NODE_IGNORE`)\n* **--ignoreWarnings, -I** Set an array of TypeScript diagnostic codes to ignore (also `process.env.TS_NODE_IGNORE_WARNINGS`)\n* **--disableWarnings, -D** Ignore all TypeScript errors (also `process.env.TS_NODE_DISABLE_WARNINGS`)\n* **--compilerOptions, -O** Set compiler options using JSON (E.g. `--compilerOptions '{\"target\":\"es6\"}'`) (also `process.env.TS_NODE_COMPILER_OPTIONS`)\n* **--fast, -F** Use TypeScript's `transpileModule` mode (no type checking, but faster compilation) (also `process.env.TS_NODE_FAST`)\n* **--no-cache** Skip hitting the compiled JavaScript cache (also `process.env.TS_NODE_CACHE`)\n* **--cache-directory** Configure the TypeScript cache directory (also `process.env.TS_NODE_CACHE_DIRECTORY`)\n\n## Programmatic Usage\n\n```js\nrequire('ts-node').register({ /* options */ })\n\n// Or using the shortcut file.\nrequire('ts-node/register')\n```\n\nThis will register the TypeScript compiler for \"on the fly\" compilation support of `.ts` and `.tsx` files during the run\nof the script. From here you can use `require` to bring in modules from TypeScript files:\n\n```js\nvar someModule = require('path_to_a_typescript_file');\n```\n\n## License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/ts-node.svg?style=flat\n[npm-url]: https://npmjs.org/package/ts-node\n[downloads-image]: https://img.shields.io/npm/dm/ts-node.svg?style=flat\n[downloads-url]: https://npmjs.org/package/ts-node\n[travis-image]: https://img.shields.io/travis/TypeStrong/ts-node.svg?style=flat\n[travis-url]: https://travis-ci.org/TypeStrong/ts-node\n[coveralls-image]: https://img.shields.io/coveralls/TypeStrong/ts-node.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/TypeStrong/ts-node?branch=master\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Blake Embrey (hello@blakeembrey.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ts-node/-/ts-node-3.3.0.tgz#c13c6a3024e30be1180dd53038fc209289d4bf69",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ts-node/-/ts-node-3.3.0.tgz",
    "hash": "c13c6a3024e30be1180dd53038fc209289d4bf69",
    "registry": "npm",
    "packageName": "ts-node"
  },
  "registry": "npm",
  "hash": "c13c6a3024e30be1180dd53038fc209289d4bf69"
}